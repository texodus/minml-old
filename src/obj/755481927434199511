("   let x = 3;                    let f = fun y -> y + x;       let x = 2;                    f 3 == 6                   ",TestRec {_source = "   let x = 3;                    let f = fun y -> y + x;       let x = 2;                    f 3 == 6                   ", _ast = Right (LetExpr (Sym "x") (VarExpr (LitVal (NumLit 3.0))) (Just (LetExpr (Sym "f") (AbsExpr (Sym "y") (AppExpr (AppExpr (VarExpr (SymVal (Sym "+"))) (VarExpr (SymVal (Sym "y")))) (VarExpr (SymVal (Sym "x"))))) (Just (LetExpr (Sym "x") (VarExpr (LitVal (NumLit 2.0))) (Just (AppExpr (AppExpr (VarExpr (SymVal (Sym "=="))) (AppExpr (VarExpr (SymVal (Sym "f"))) (VarExpr (LitVal (NumLit 3.0))))) (VarExpr (LitVal (NumLit 6.0)))))))))), _types = Right (LetExpr (Sym "x") (VarExpr (LitVal (NumLit 3.0))) (Just (LetExpr (Sym "f") (AbsExpr (Sym "y") (AppExpr (AppExpr (VarExpr (SymVal (Sym "+"))) (VarExpr (SymVal (Sym "y")))) (VarExpr (SymVal (Sym "x"))))) (Just (LetExpr (Sym "x") (VarExpr (LitVal (NumLit 2.0))) (Just (AppExpr (AppExpr (VarExpr (SymVal (Sym "=="))) (AppExpr (VarExpr (SymVal (Sym "f"))) (VarExpr (LitVal (NumLit 3.0))))) (VarExpr (LitVal (NumLit 6.0)))))))))), _js = Right "var jmId_0;jmId_0 = (function(){var jmId_1;jmId_1 = 3.0;var jmId_4;jmId_4 = (function(jmId_6){return (jmId_6+jmId_1);});var jmId_9;jmId_9 = 2.0;return (jmId_4(3.0)==6.0);})();console.log(jmId_0);", _evaled = Right "true\n"})