("   f = {x: 3}       \n   match f with     \n       {x: x} = x   \n       _ = 0        \n",TestRec {_source = "   f = {x: 3}       \n   match f with     \n       {x: x} = x   \n       _ = 0        \n", _ast = Right (LetExpr (Sym "f") (RecExpr (Record (fromList [("x",VarExpr (LitVal (NumLit 3.0)))]))) (Just (MatExpr (VarExpr (SymVal (Sym "f"))) [(RecPatt (Record (fromList [("x",ValPatt (SymVal (Sym "x")))])),VarExpr (SymVal (Sym "x"))),(ValPatt (SymVal (Sym "_")),VarExpr (LitVal (NumLit 0.0)))]))), _types = Right (LetExpr (Sym "f") (RecExpr (Record (fromList [("x",VarExpr (LitVal (NumLit 3.0)))]))) (Just (MatExpr (VarExpr (SymVal (Sym "f"))) [(RecPatt (Record (fromList [("x",ValPatt (SymVal (Sym "x")))])),VarExpr (SymVal (Sym "x"))),(ValPatt (SymVal (Sym "_")),VarExpr (LitVal (NumLit 0.0)))]))), _js = Right "var jmId_0;jmId_0 = (function(){var jmId_1;jmId_1 = { 'x': 3.0};var jmId_4;jmId_4 = jmId_1;return jmId_4[\"x\"];})();console.log(jmId_0);", _evaled = Right "3\n"})