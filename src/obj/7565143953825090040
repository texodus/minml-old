("\n                  \n                    Box: a -> Box a\n                    let (Box x) = Box 5\n                    x + 5    \n\n                ",TestRec {_source = "\n                  \n                    Box: a -> Box a\n                    let (Box x) = Box 5\n                    x + 5    \n\n                ", _ast = Right (TypExpr (TypeSymP "Box") (TypeAbsP (TypeApp (TypeApp (TypeSym (TypeSymP "->")) (TypeVar (TypeVarP "a"))) (TypeApp (TypeSym (TypeSymP "Box")) (TypeVar (TypeVarP "a"))))) (Just (LetExpr (Sym "__match__") (AppExpr (VarExpr (ConVal (TypeSym (TypeSymP "Box")))) (VarExpr (LitVal (NumLit 5.0)))) (Just (MatExpr (VarExpr (SymVal (Sym "__match__"))) [(ConPatt (TypeSymP "Box") [ValPatt (SymVal (Sym "x"))],AppExpr (AppExpr (VarExpr (SymVal (Sym "+"))) (VarExpr (SymVal (Sym "x")))) (VarExpr (LitVal (NumLit 5.0))))]))))), _types = Right (TypExpr (TypeSymP "Box") (TypeAbsP (TypeApp (TypeApp (TypeSym (TypeSymP "->")) (TypeVar (TypeVarP "a"))) (TypeApp (TypeSym (TypeSymP "Box")) (TypeVar (TypeVarP "a"))))) (Just (LetExpr (Sym "__match__") (AppExpr (VarExpr (ConVal (TypeSym (TypeSymP "Box")))) (VarExpr (LitVal (NumLit 5.0)))) (Just (MatExpr (VarExpr (SymVal (Sym "__match__"))) [(ConPatt (TypeSymP "Box") [ValPatt (SymVal (Sym "x"))],AppExpr (AppExpr (VarExpr (SymVal (Sym "+"))) (VarExpr (SymVal (Sym "x")))) (VarExpr (LitVal (NumLit 5.0))))]))))), _js = Right "var jmId_0;jmId_0 = (function(){var Box;var jmId_1;jmId_1 = (function($0){this[0] = $0;});Box = (function(jmId_2){return new jmId_1(jmId_2);});Box.__type__ = jmId_1;var jmId_3;jmId_3 = Box(5.0);var jmId_6;jmId_6 = jmId_3;if((jmId_6 instanceof Box.__type__)){return (jmId_6[0]+5.0);};throw(\"Pattern Match Exhausted\");})();console.log(jmId_0);", _evaled = Right "10\n"})