("   data Just: a -> Maybe a     \n   unbox (Just x) = x          \n   unbox (Just 5)              \n",TestRec {_source = "   data Just: a -> Maybe a     \n   unbox (Just x) = x          \n   unbox (Just 5)              \n", _ast = Right (TypExpr (TypeSymP "Just") (TypeAbsP (TypeApp (TypeApp (TypeSym (TypeSymP "->")) (TypeVar (TypeVarP "a"))) (TypeApp (TypeSym (TypeSymP "Maybe")) (TypeVar (TypeVarP "a"))))) (Just (LetExpr (Sym "unbox") (AbsExpr (Sym "__match__") (MatExpr (VarExpr (SymVal (Sym "__match__"))) [(ConPatt (TypeSymP "Just") [ValPatt (SymVal (Sym "x"))],VarExpr (SymVal (Sym "x")))])) (Just (AppExpr (VarExpr (SymVal (Sym "unbox"))) (AppExpr (VarExpr (ConVal (TypeSym (TypeSymP "Just")))) (VarExpr (LitVal (NumLit 5.0))))))))), _types = Right (TypExpr (TypeSymP "Just") (TypeAbsP (TypeApp (TypeApp (TypeSym (TypeSymP "->")) (TypeVar (TypeVarP "a"))) (TypeApp (TypeSym (TypeSymP "Maybe")) (TypeVar (TypeVarP "a"))))) (Just (LetExpr (Sym "unbox") (AbsExpr (Sym "__match__") (MatExpr (VarExpr (SymVal (Sym "__match__"))) [(ConPatt (TypeSymP "Just") [ValPatt (SymVal (Sym "x"))],VarExpr (SymVal (Sym "x")))])) (Just (AppExpr (VarExpr (SymVal (Sym "unbox"))) (AppExpr (VarExpr (ConVal (TypeSym (TypeSymP "Just")))) (VarExpr (LitVal (NumLit 5.0))))))))), _js = Right "var jmId_0;jmId_0 = (function(){var Just;var jmId_1;jmId_1 = (function($0){this[0] = $0;});Just = (function(jmId_2){return new jmId_1(jmId_2);});Just.__type__ = jmId_1;var jmId_3;jmId_3 = (function(jmId_5){var jmId_7;jmId_7 = jmId_5;if((jmId_7 instanceof Just.__type__)){return jmId_7[0];};throw(\"Pattern Match Exhausted\");});return jmId_3(Just(5.0));})();console.log(jmId_0);", _evaled = Right "5\n"})