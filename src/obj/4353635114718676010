("\n \n                    Xml: String -> String -> String\n                   \n                    `<(a)> (b) </(c)>` = Xml a b\n                 \n                    <\"div\"> \n                        <\"a\">\"test\"</\"a\">\n                    </\"div\">\n\n                ",TestRec {_source = "\n \n                    Xml: String -> String -> String\n                   \n                    `<(a)> (b) </(c)>` = Xml a b\n                 \n                    <\"div\"> \n                        <\"a\">\"test\"</\"a\">\n                    </\"div\">\n\n                ", _ast = Right (TypExpr (TypeSymP "Xml") (TypeAbsP (TypeApp (TypeApp (TypeSym (TypeSymP "->")) (TypeSym (TypeSymP "String"))) (TypeApp (TypeApp (TypeSym (TypeSymP "->")) (TypeSym (TypeSymP "String"))) (TypeSym (TypeSymP "String"))))) (Just (AppExpr (AppExpr (VarExpr (ConVal (TypeSym (TypeSymP "Xml")))) (VarExpr (LitVal (StrLit "div")))) (AppExpr (AppExpr (VarExpr (ConVal (TypeSym (TypeSymP "Xml")))) (VarExpr (LitVal (StrLit "a")))) (VarExpr (LitVal (StrLit "test"))))))), _types = Right (TypExpr (TypeSymP "Xml") (TypeAbsP (TypeApp (TypeApp (TypeSym (TypeSymP "->")) (TypeSym (TypeSymP "String"))) (TypeApp (TypeApp (TypeSym (TypeSymP "->")) (TypeSym (TypeSymP "String"))) (TypeSym (TypeSymP "String"))))) (Just (AppExpr (AppExpr (VarExpr (ConVal (TypeSym (TypeSymP "Xml")))) (VarExpr (LitVal (StrLit "div")))) (AppExpr (AppExpr (VarExpr (ConVal (TypeSym (TypeSymP "Xml")))) (VarExpr (LitVal (StrLit "a")))) (VarExpr (LitVal (StrLit "test"))))))), _js = Right "var jmId_0;jmId_0 = (function(){var Xml;var jmId_1;jmId_1 = (function($0,$1){this[0] = $0;this[1] = $1;});Xml = (function(jmId_2){return (function(jmId_3){return new jmId_1(jmId_2,jmId_3);});});Xml.__type__ = jmId_1;return Xml(\"div\")(Xml(\"a\")(\"test\"));})();console.log(jmId_0);", _evaled = Right "{ '0': 'div', '1': { '0': 'a', '1': 'test' } }\n"})