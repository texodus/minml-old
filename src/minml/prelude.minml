


True:  Bool
False: Bool

`(a) :: (b)` = 
	let __match__ = a
	__match__ :: b
	__match__

`if (a) then (b) else (c)` = match a with
	True  = b
	False = c

`if (a) { (b) } else { (c) }` = if a then b else c
`if (a) { (b) } else (c)`     = if a then b else c
`if (a); (b) else (c)`        = if a then b else c

`fun (x) = (y)` = fun x -> y
`λ (x) -> (y)`  = fun x -> y
`λ (x) = (y)`   = fun x -> y
`\ (x) -> (y)`  = fun x -> y
`\ (x) = (y)`   = fun x -> y		

`let (a) (b) = (c); (d)`     = let a = fun b -> c; d 
`let (a) (b) (c) = (d); (e)` = let a = fun b -> fun c -> d; e

`(a) = (b); (c)`         = let a = b; c
`(a) (b) = (c); (d)`     = let a b = c; d
`(a) (b) (c) = (d); (e)` = let a b c = d; e

True: Bool
